ðŸ”¹ What is ResponseEntity?

ResponseEntity is a generic wrapper around the whole HTTP response in Spring.
It lets you define:

--->    Body â†’ the actual data (JSON, XML, plain text, etc.)
--->    HTTP Status Code (e.g., 200 OK, 201 CREATED, 404 NOT_FOUND)
--->    Headers (custom response headers if needed)

It is part of org.springframework.http.ResponseEntity.

ðŸ”¹ Why do we use it?

--->    To fully control the HTTP response (status, body, headers).
--->    To customize responses dynamically based on conditions.
--->    To send additional metadata via headers along with the body.


ðŸ”¹ Example 1 â€“ Returning data with 200 OK

@GetMapping("/hello")
public ResponseEntity<String> hello() {
    return ResponseEntity.ok("Hello, World!");
}

ðŸ‘‰ Returns:
Status: 200 OK
Body: "Hello, World!"

ðŸ”¹ Example 2 â€“ Custom status code

@PostMapping("/users")
public ResponseEntity<User> createUser(@RequestBody User user) {
    User savedUser = userService.save(user);
    return new ResponseEntity<>(savedUser, HttpStatus.CREATED);
}


ðŸ‘‰ Returns:
Status: 201 CREATED
Body: JSON of the saved user

ðŸ”¹ Example 3 â€“ Adding headers
@GetMapping("/download")
public ResponseEntity<String> downloadFile() {
    return ResponseEntity.ok()
            .header("Content-Disposition", "attachment; filename=file.txt")
            .body("File content here");
}


ðŸ‘‰ Adds a custom header for file download.

âœ… In short:

Use ResponseEntity when you want to return a normal response with full control (status, body, headers).

Use ResponseStatusException when you want to throw an error with a specific HTTP status.

---------------------------------------------------------------------------------------------------------------------------

Used in CategoryController to fully control the HTTP response

Syntax 1 : new ResponseEntity<>(e.getReason(), e.getStatusCode());
Syntax 2 :